{
  "version": 3,
  "sources": ["../../three/examples/jsm/nodes/display/BlendModeNode.js"],
  "sourcesContent": ["import TempNode from '../core/TempNode.js';\nimport { /*mix, step,*/ EPSILON } from '../math/MathNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, tslFn, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\n\nexport const BurnNode = tslFn( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => blend[ c ].lessThan( EPSILON ).cond( blend[ c ], base[ c ].oneMinus().div( blend[ c ] ).oneMinus().max( 0 ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} ).setLayout( {\n\tname: 'burnColor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const DodgeNode = tslFn( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => blend[ c ].equal( 1.0 ).cond( blend[ c ], base[ c ].div( blend[ c ].oneMinus() ).max( 0 ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} ).setLayout( {\n\tname: 'dodgeColor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const ScreenNode = tslFn( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus();\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} ).setLayout( {\n\tname: 'screenColor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nexport const OverlayNode = tslFn( ( { base, blend } ) => {\n\n\tconst fn = ( c ) => base[ c ].lessThan( 0.5 ).cond( base[ c ].mul( blend[ c ], 2.0 ), base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus() );\n\t//const fn = ( c ) => mix( base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus(), base[ c ].mul( blend[ c ], 2.0 ), step( base[ c ], 0.5 ) );\n\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\n\n} ).setLayout( {\n\tname: 'overlayColor',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\nclass BlendModeNode extends TempNode {\n\n\tconstructor( blendMode, baseNode, blendNode ) {\n\n\t\tsuper();\n\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.baseNode = baseNode;\n\t\tthis.blendNode = blendNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { blendMode, baseNode, blendNode } = this;\n\t\tconst params = { base: baseNode, blend: blendNode };\n\n\t\tlet outputNode = null;\n\n\t\tif ( blendMode === BlendModeNode.BURN ) {\n\n\t\t\toutputNode = BurnNode( params );\n\n\t\t} else if ( blendMode === BlendModeNode.DODGE ) {\n\n\t\t\toutputNode = DodgeNode( params );\n\n\t\t} else if ( blendMode === BlendModeNode.SCREEN ) {\n\n\t\t\toutputNode = ScreenNode( params );\n\n\t\t} else if ( blendMode === BlendModeNode.OVERLAY ) {\n\n\t\t\toutputNode = OverlayNode( params );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nBlendModeNode.BURN = 'burn';\nBlendModeNode.DODGE = 'dodge';\nBlendModeNode.SCREEN = 'screen';\nBlendModeNode.OVERLAY = 'overlay';\n\nexport default BlendModeNode;\n\nexport const burn = nodeProxy( BlendModeNode, BlendModeNode.BURN );\nexport const dodge = nodeProxy( BlendModeNode, BlendModeNode.DODGE );\nexport const overlay = nodeProxy( BlendModeNode, BlendModeNode.OVERLAY );\nexport const screen = nodeProxy( BlendModeNode, BlendModeNode.SCREEN );\n\naddNodeElement( 'burn', burn );\naddNodeElement( 'dodge', dodge );\naddNodeElement( 'overlay', overlay );\naddNodeElement( 'screen', screen );\n\naddNodeClass( 'BlendModeNode', BlendModeNode );\n"],
  "mappings": "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",
  "names": []
}
